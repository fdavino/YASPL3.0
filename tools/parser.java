
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import syntaxTree.*;
import syntaxTree.arithOp.*;
import syntaxTree.comp.*;
import syntaxTree.logicOp.*;
import syntaxTree.relOp.*;
import syntaxTree.statOp.*;
import syntaxTree.wrapper.*;
import syntaxTree.varDeclInitOp.*;
import syntaxTree.leaf.*;
import syntaxTree.utils.*;
import syntaxTree.declsOp.*;
import visitor.*;
import exception.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\006\000\002\007\004\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\003" +
    "\000\002\012\010\000\002\012\007\000\002\013\004\000" +
    "\002\013\002\000\002\014\007\000\002\014\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\006\000\002\017\007\000\002\017\006\000\002" +
    "\017\012\000\002\017\010\000\002\017\010\000\002\017" +
    "\015\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\004\000\002\022\004" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\004\005\001\002\000\004\002\223\001" +
    "\002\000\020\005\ufffd\007\010\010\013\011\012\012\017" +
    "\015\016\063\007\001\002\000\004\013\214\001\002\000" +
    "\004\013\ufff9\001\002\000\004\013\ufff8\001\002\000\020" +
    "\005\ufffd\007\010\010\013\011\012\012\017\015\016\063" +
    "\007\001\002\000\004\013\ufff6\001\002\000\004\013\ufff7" +
    "\001\002\000\020\005\ufffd\007\010\010\013\011\012\012" +
    "\017\015\016\063\007\001\002\000\004\005\207\001\002" +
    "\000\004\013\020\001\002\000\004\013\ufff5\001\002\000" +
    "\004\016\021\001\002\000\012\017\027\060\023\061\022" +
    "\062\026\001\002\000\014\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\063\uffe7\001\002\000\014\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\063\uffe8\001\002\000\014\007\010\010\013\011" +
    "\012\012\017\063\007\001\002\000\004\017\201\001\002" +
    "\000\014\007\uffe6\010\uffe6\011\uffe6\012\uffe6\063\uffe6\001" +
    "\002\000\004\020\030\001\002\000\054\007\010\010\013" +
    "\011\012\012\017\013\uffeb\016\uffeb\021\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\044\uffeb\045\uffeb\055\uffeb\063\007\001" +
    "\002\000\020\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\015\uffed\063\uffed\001\002\000\042\013\047\016\057\021" +
    "\ufffb\025\051\026\052\030\054\033\050\034\037\035\035" +
    "\036\060\037\043\040\053\042\045\044\040\045\056\055" +
    "\041\001\002\000\054\007\010\010\013\011\012\012\017" +
    "\013\uffeb\016\uffeb\021\uffeb\025\uffeb\026\uffeb\030\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb" +
    "\044\uffeb\045\uffeb\055\uffeb\063\007\001\002\000\042\013" +
    "\uffec\016\uffec\021\uffec\025\uffec\026\uffec\030\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\044" +
    "\uffec\045\uffec\055\uffec\001\002\000\042\006\uffc0\014\uffc0" +
    "\017\uffc0\023\uffc0\024\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\056\uffc0" +
    "\057\uffc0\001\002\000\044\002\ufffb\013\047\016\057\021" +
    "\ufffb\025\051\026\052\030\054\033\050\034\037\035\035" +
    "\036\060\037\043\040\053\042\045\044\040\045\056\055" +
    "\041\001\002\000\042\006\uffc2\014\uffc2\017\uffc2\023\uffc2" +
    "\024\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\056\uffc2\057\uffc2\001\002" +
    "\000\004\016\173\001\002\000\026\013\062\016\057\030" +
    "\054\033\050\034\037\035\035\036\060\037\043\040\053" +
    "\055\041\001\002\000\004\021\171\001\002\000\042\006" +
    "\uffc6\014\uffc6\017\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\056\uffc6\057\uffc6\001\002\000\004\023\167\001\002" +
    "\000\004\016\160\001\002\000\040\006\uffd5\014\156\017" +
    "\uffd5\023\uffd5\027\066\030\064\031\073\032\071\050\072" +
    "\051\065\052\075\053\070\054\067\056\063\057\076\001" +
    "\002\000\046\014\133\016\135\022\uffef\023\uffc4\025\134" +
    "\026\136\027\uffc4\030\uffc4\031\uffc4\032\uffc4\041\137\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4\057\uffc4" +
    "\001\002\000\042\006\uffc3\014\uffc3\017\uffc3\023\uffc3\024" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\056\uffc3\057\uffc3\001\002\000" +
    "\004\013\131\001\002\000\004\013\127\001\002\000\042" +
    "\006\uffc5\014\uffc5\017\uffc5\023\uffc5\024\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\056\uffc5\057\uffc5\001\002\000\026\013\062\016" +
    "\057\030\054\033\050\034\037\035\035\036\060\037\043" +
    "\040\053\055\041\001\002\000\004\022\124\001\002\000" +
    "\004\013\112\001\002\000\026\013\062\016\057\030\054" +
    "\033\050\034\037\035\035\036\060\037\043\040\053\055" +
    "\041\001\002\000\042\006\uffc1\014\uffc1\017\uffc1\023\uffc1" +
    "\024\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\056\uffc1\057\uffc1\001\002" +
    "\000\032\017\074\027\066\030\064\031\073\032\071\050" +
    "\072\051\065\052\075\053\070\054\067\056\063\057\076" +
    "\001\002\000\042\006\uffc4\014\uffc4\017\uffc4\023\uffc4\024" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\056\uffc4\057\uffc4\001\002\000" +
    "\026\013\062\016\057\030\054\033\050\034\037\035\035" +
    "\036\060\037\043\040\053\055\041\001\002\000\026\013" +
    "\062\016\057\030\054\033\050\034\037\035\035\036\060" +
    "\037\043\040\053\055\041\001\002\000\026\013\062\016" +
    "\057\030\054\033\050\034\037\035\035\036\060\037\043" +
    "\040\053\055\041\001\002\000\026\013\062\016\057\030" +
    "\054\033\050\034\037\035\035\036\060\037\043\040\053" +
    "\055\041\001\002\000\026\013\062\016\057\030\054\033" +
    "\050\034\037\035\035\036\060\037\043\040\053\055\041" +
    "\001\002\000\026\013\062\016\057\030\054\033\050\034" +
    "\037\035\035\036\060\037\043\040\053\055\041\001\002" +
    "\000\026\013\062\016\057\030\054\033\050\034\037\035" +
    "\035\036\060\037\043\040\053\055\041\001\002\000\026" +
    "\013\062\016\057\030\054\033\050\034\037\035\035\036" +
    "\060\037\043\040\053\055\041\001\002\000\026\013\062" +
    "\016\057\030\054\033\050\034\037\035\035\036\060\037" +
    "\043\040\053\055\041\001\002\000\042\006\uffc7\014\uffc7" +
    "\017\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7" +
    "\057\uffc7\001\002\000\026\013\062\016\057\030\054\033" +
    "\050\034\037\035\035\036\060\037\043\040\053\055\041" +
    "\001\002\000\026\013\062\016\057\030\054\033\050\034" +
    "\037\035\035\036\060\037\043\040\053\055\041\001\002" +
    "\000\042\006\uffcf\014\uffcf\017\uffcf\023\uffcf\024\uffcf\027" +
    "\uffcf\030\uffcf\031\073\032\071\050\072\051\065\052\075" +
    "\053\070\054\067\056\063\057\uffcf\001\002\000\030\006" +
    "\uffcb\014\uffcb\017\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\056\uffcb\057\uffcb\001\002\000\042\006" +
    "\uffd2\014\uffd2\017\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\050\072\051\065\052\075\053\070\054" +
    "\067\056\uffd2\057\uffd2\001\002\000\030\006\uffce\014\uffce" +
    "\017\uffce\023\uffce\024\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\056\uffce\057\uffce\001\002\000\042\006\uffd1\014\uffd1" +
    "\017\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\050\072\051\065\052\075\053\070\054\067\056\uffd1" +
    "\057\uffd1\001\002\000\030\006\uffcc\014\uffcc\017\uffcc\023" +
    "\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\056\uffcc" +
    "\057\uffcc\001\002\000\030\006\uffca\014\uffca\017\uffca\023" +
    "\uffca\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca\056\uffca" +
    "\057\uffca\001\002\000\042\006\uffd3\014\uffd3\017\uffd3\023" +
    "\uffd3\024\uffd3\027\uffd3\030\uffd3\031\073\032\071\050\072" +
    "\051\065\052\075\053\070\054\067\056\063\057\uffd3\001" +
    "\002\000\030\006\uffcd\014\uffcd\017\uffcd\023\uffcd\024\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\056\uffcd\057\uffcd\001" +
    "\002\000\042\006\uffd4\014\uffd4\017\uffd4\023\uffd4\024\uffd4" +
    "\027\uffd4\030\uffd4\031\073\032\071\050\072\051\065\052" +
    "\075\053\070\054\067\056\063\057\uffd4\001\002\000\042" +
    "\006\uffd0\014\uffd0\017\uffd0\023\uffd0\024\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\050\072\051\065\052\075\053\070" +
    "\054\067\056\uffd0\057\uffd0\001\002\000\004\060\113\001" +
    "\002\000\004\016\114\001\002\000\026\013\062\016\057" +
    "\030\054\033\050\034\037\035\035\036\060\037\043\040" +
    "\053\055\041\001\002\000\032\024\116\027\066\030\064" +
    "\031\073\032\071\050\072\051\065\052\075\053\070\054" +
    "\067\056\063\057\076\001\002\000\026\013\062\016\057" +
    "\030\054\033\050\034\037\035\035\036\060\037\043\040" +
    "\053\055\041\001\002\000\032\024\120\027\066\030\064" +
    "\031\073\032\071\050\072\051\065\052\075\053\070\054" +
    "\067\056\063\057\076\001\002\000\026\013\062\016\057" +
    "\030\054\033\050\034\037\035\035\036\060\037\043\040" +
    "\053\055\041\001\002\000\032\017\122\027\066\030\064" +
    "\031\073\032\071\050\072\051\065\052\075\053\070\054" +
    "\067\056\063\057\076\001\002\000\004\020\030\001\002" +
    "\000\044\002\uffd8\013\uffd8\016\uffd8\021\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\044\uffd8\045\uffd8\055\uffd8\001\002\000" +
    "\004\006\125\001\002\000\044\002\uffe4\013\uffe4\016\uffe4" +
    "\021\uffe4\025\uffe4\026\uffe4\030\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\044\uffe4\045\uffe4" +
    "\055\uffe4\001\002\000\042\006\uffc9\014\uffc9\017\uffc9\023" +
    "\uffc9\024\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9\057\uffc9\001" +
    "\002\000\004\006\130\001\002\000\044\002\uffdf\013\uffdf" +
    "\016\uffdf\021\uffdf\025\uffdf\026\uffdf\030\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\044\uffdf" +
    "\045\uffdf\055\uffdf\001\002\000\004\006\132\001\002\000" +
    "\044\002\uffe1\013\uffe1\016\uffe1\021\uffe1\025\uffe1\026\uffe1" +
    "\030\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\042\uffe1\044\uffe1\045\uffe1\055\uffe1\001\002\000\026" +
    "\013\154\016\057\030\054\033\050\034\037\035\035\036" +
    "\060\037\043\040\053\055\041\001\002\000\004\006\153" +
    "\001\002\000\030\013\140\016\057\017\146\030\054\033" +
    "\050\034\037\035\035\036\060\037\043\040\053\055\041" +
    "\001\002\000\004\006\145\001\002\000\026\013\140\016" +
    "\057\030\054\033\050\034\037\035\035\036\060\037\043" +
    "\040\053\055\041\001\002\000\040\006\uffc4\014\143\017" +
    "\uffc4\023\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4\057\uffc4\001" +
    "\002\000\004\006\142\001\002\000\044\002\uffde\013\uffde" +
    "\016\uffde\021\uffde\025\uffde\026\uffde\030\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\044\uffde" +
    "\045\uffde\055\uffde\001\002\000\026\013\140\016\057\030" +
    "\054\033\050\034\037\035\035\036\060\037\043\040\053" +
    "\055\041\001\002\000\010\006\uffd6\017\uffd6\023\uffd6\001" +
    "\002\000\044\002\uffe0\013\uffe0\016\uffe0\021\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\042\uffe0\044\uffe0\045\uffe0\055\uffe0\001\002" +
    "\000\004\006\152\001\002\000\004\017\150\001\002\000" +
    "\004\006\151\001\002\000\044\002\uffdd\013\uffdd\016\uffdd" +
    "\021\uffdd\025\uffdd\026\uffdd\030\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\044\uffdd\045\uffdd" +
    "\055\uffdd\001\002\000\044\002\uffdc\013\uffdc\016\uffdc\021" +
    "\uffdc\025\uffdc\026\uffdc\030\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\042\uffdc\044\uffdc\045\uffdc\055" +
    "\uffdc\001\002\000\044\002\uffe2\013\uffe2\016\uffe2\021\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\044\uffe2\045\uffe2\055\uffe2" +
    "\001\002\000\036\014\133\022\uffef\023\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\056\uffc4\057\uffc4\001\002\000\004\022\ufff0\001" +
    "\002\000\026\013\140\016\057\030\054\033\050\034\037" +
    "\035\035\036\060\037\043\040\053\055\041\001\002\000" +
    "\010\006\uffd7\017\uffd7\023\uffd7\001\002\000\026\013\062" +
    "\016\057\030\054\033\050\034\037\035\035\036\060\037" +
    "\043\040\053\055\041\001\002\000\032\017\162\027\066" +
    "\030\064\031\073\032\071\050\072\051\065\052\075\053" +
    "\070\054\067\056\063\057\076\001\002\000\004\043\163" +
    "\001\002\000\004\020\030\001\002\000\046\002\uffda\013" +
    "\uffda\016\uffda\021\uffda\025\uffda\026\uffda\030\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\044" +
    "\uffda\045\uffda\047\165\055\uffda\001\002\000\004\020\030" +
    "\001\002\000\044\002\uffdb\013\uffdb\016\uffdb\021\uffdb\025" +
    "\uffdb\026\uffdb\030\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\042\uffdb\044\uffdb\045\uffdb\055\uffdb\001" +
    "\002\000\004\006\170\001\002\000\044\002\uffe3\013\uffe3" +
    "\016\uffe3\021\uffe3\025\uffe3\026\uffe3\030\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\044\uffe3" +
    "\045\uffe3\055\uffe3\001\002\000\064\002\uffe5\005\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5" +
    "\021\uffe5\025\uffe5\026\uffe5\030\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\047\uffe5\055\uffe5\063\uffe5\001\002\000\042\006\uffc8\014" +
    "\uffc8\017\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056" +
    "\uffc8\057\uffc8\001\002\000\026\013\062\016\057\030\054" +
    "\033\050\034\037\035\035\036\060\037\043\040\053\055" +
    "\041\001\002\000\032\017\175\027\066\030\064\031\073" +
    "\032\071\050\072\051\065\052\075\053\070\054\067\056" +
    "\063\057\076\001\002\000\004\046\176\001\002\000\004" +
    "\020\030\001\002\000\044\002\uffd9\013\uffd9\016\uffd9\021" +
    "\uffd9\025\uffd9\026\uffd9\030\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\042\uffd9\044\uffd9\045\uffd9\055" +
    "\uffd9\001\002\000\006\002\ufffc\021\ufffc\001\002\000\004" +
    "\020\030\001\002\000\020\005\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\015\uffee\063\uffee\001\002\000\004\013\204" +
    "\001\002\000\006\014\205\017\uffe9\001\002\000\010\060" +
    "\023\061\022\062\026\001\002\000\004\017\uffea\001\002" +
    "\000\042\002\ufffb\013\047\016\057\025\051\026\052\030" +
    "\054\033\050\034\037\035\035\036\060\037\043\040\053" +
    "\042\045\044\040\045\056\055\041\001\002\000\004\002" +
    "\001\001\002\000\004\005\uffff\001\002\000\004\005\ufffe" +
    "\001\002\000\004\006\222\001\002\000\010\006\ufff1\014" +
    "\ufff1\041\216\001\002\000\006\006\ufff3\014\220\001\002" +
    "\000\026\013\062\016\057\030\054\033\050\034\037\035" +
    "\035\036\060\037\043\040\053\055\041\001\002\000\034" +
    "\006\ufff2\014\ufff2\027\066\030\064\031\073\032\071\050" +
    "\072\051\065\052\075\053\070\054\067\056\063\057\076" +
    "\001\002\000\004\013\214\001\002\000\004\006\ufff4\001" +
    "\002\000\060\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\015\ufffa\016\ufffa\021\ufffa\025\ufffa\026\ufffa\030" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\042\ufffa\044\ufffa\045\ufffa\055\ufffa\063\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\014\005\013\006\005\012\010\001\001\000\004" +
    "\007\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\211\005\013\006\005\012\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\210\005\013\006" +
    "\005\012\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\030\001\001\000\010\005\032\006\005\013\031" +
    "\001\001\000\002\001\001\000\014\004\041\011\054\017" +
    "\035\020\043\022\045\001\001\000\010\005\032\006\005" +
    "\013\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\177\011\054\017\035\020\043\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\110\001" +
    "\001\000\004\022\107\001\001\000\004\022\106\001\001" +
    "\000\004\022\105\001\001\000\004\022\104\001\001\000" +
    "\004\022\103\001\001\000\004\022\102\001\001\000\004" +
    "\022\101\001\001\000\004\022\100\001\001\000\002\001" +
    "\001\000\004\022\077\001\001\000\004\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\114\001\001\000\002\001\001\000\004\022" +
    "\116\001\001\000\002\001\001\000\004\022\120\001\001" +
    "\000\002\001\001\000\004\016\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\154\020\143\022\045\001\001" +
    "\000\002\001\001\000\006\020\146\022\045\001\001\000" +
    "\002\001\001\000\006\020\140\022\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\143\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\156\022\045\001" +
    "\001\000\002\001\001\000\004\022\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\163\001\001\000" +
    "\002\001\001\000\004\016\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\205\015\023\001\001\000\002\001\001\000\014\004\207" +
    "\011\054\017\035\020\043\022\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\214\001\001\000\002\001\001\000\004\022" +
    "\216\001\001\000\002\001\001\000\004\007\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String msg, Object info){
   if(info instanceof ComplexSymbol){
    int line = (((ComplexSymbol)info).getLeft().getLine());
    int col  = (((ComplexSymbol)info).getRight().getColumn());
    String val = (String)((ComplexSymbol)info).value;
   throw new SyntaxError(line, col);
   }
  }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              Programma RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programma(hxleft,hxright,"Programma", decls, s); 
																				System.out.println("Done!!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programma start_val = (Programma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              Decls RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decls.addChild(var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              Decls RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclsWrapper def = (DeclsWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decls.addChild(def); 
																								decls.setLeft(declsxleft);
																								decls.setRight(declsxright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Decls RESULT =null;
		 RESULT = new Decls(null,null,"Decls"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmt = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt.addChild(s); 
																								stmt.setLeft(sxleft);
																								stmt.setRight(sxright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(null,null,"Statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Var_decls_init SEMI 
            {
              VarDecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeLeaf tp = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(tpxleft,tpxright,"VarDecl", tp, vdi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeLeaf RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeLeaf(txleft,txright,"Type", "INT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeLeaf RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeLeaf(txleft,txright,"Type", "BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              TypeLeaf RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeLeaf(txleft,txright,"Type", "DOUBLE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeLeaf RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeLeaf(txleft,txright,"Type", "STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeLeaf RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeLeaf(txleft,txright,"Type", "CHAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_decls_init ::= ID Var_init_value COMMA Var_decls_init 
            {
              VarDeclsInit RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vivleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vivright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (viv == null)
																					? vdi.addChild(new VarNotInit(idxleft,idxright,"VarNotInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))))
																					: vdi.addChild(new VarInit(idxleft,idxright,"VarInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), viv)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Var_decls_init ::= ID Var_init_value 
            {
              VarDeclsInit RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vivleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vivright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (viv == null) 
																					? (new VarDeclsInit(idxleft,idxright,"VarDeclsInit")).addChild(new VarNotInit(idxleft,idxright,"VarNotInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))))
																					: (new VarDeclsInit(idxleft,idxright,"VarDeclsInit")).addChild(new VarInit(idxleft,idxright,"VarInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), viv)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Var_init_value ::= ASSIGN Expr 
            {
              VarInitValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarInitValue(exleft,exright,"VarInitValue", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_init_value ::= 
            {
              VarInitValue RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Vars ::= ID COMMA Vars 
            {
              Vars RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vars.addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Vars ::= ID 
            {
              Vars RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vars(idxleft,idxright,"Vars").addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body 
            {
              DeclsWrapper RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParDecls par = (ParDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclPar(idxleft,idxright,"DefDecl", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), par, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              DeclsWrapper RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclNoPar(idxleft,idxright,"DefDecl", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var_decls ::= Var_decl Var_decls 
            {
              VarDecls RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecls vds = (VarDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vds.addChild(vd);
																									vds.setLeft(vdxleft);
																									vds.setRight(vdxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var_decls ::= 
            {
              VarDecls RESULT =null;
		 RESULT = new VarDecls(null,null,"VarDecls"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Par_decls ::= Par_type Type ID COMMA Par_decls 
            {
              ParDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecls parDecls = (ParDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parDecls
																						.addChild(new ParDeclSon(parxleft,parxright,"ParDeclSon", par, type, new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Par_decls ::= Par_type Type ID 
            {
              ParDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecls(idxleft,idxright,"ParDeclsOp")
																						.addChild(new ParDeclSon(idxleft,idxright,"ParDeclSon", par, type, new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Par_type ::= IN 
            {
              ParTypeLeaf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "IN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Par_type ::= OUT 
            {
              ParTypeLeaf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Par_type ::= INOUT 
            {
              ParTypeLeaf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "INOUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Body ::= LGPAR Var_decls Statements RGPAR 
            {
              Body RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecls vd = (VarDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Body(vdxleft,vdxright,"Body", vd, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Vars READ SEMI 
            {
              Stat RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOp(rxleft,rxright,"ReadOp", vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= Args WRITE SEMI 
            {
              Stat RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(wxleft,wxright,"WriteOp", args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= ID INC SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncPostOp(idxleft, idxright, "IncPostOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= INC ID SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncPreOp(idxleft, idxright, "IncPreOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= ID DEC SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DecPostOp(idxleft, idxright, "DecPostOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= DEC ID SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DecPreOp(idxleft, idxright, "DecPreOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ID ASSIGN Args SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOp(idxleft,idxright,"AssignOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ID LPAR Args RPAR SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallOp(idxleft,idxright,"CallOpWithArgs", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= ID LPAR RPAR SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new CallOp(idxleft,idxright,"CallOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Body b1 = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b2 = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenElseOp(exleft,exright,"IfThenElseOp", e, b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenOp(exleft,exright,"IfThenOp", e, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileOp(exleft,exright,"WhileOp", e, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= FOR ID IN LPAR Expr COLON Expr COLON Expr RPAR Body 
            {
              Stat RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ic = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForOp(fxleft,fxright,"ForOp", new IdConst(idxleft, idxright,"Id",new Leaf(idxleft,idxright,"Value",id)),e1,e2,ic,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Args ::= Expr COMMA Args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args arg = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = arg.addChild(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Args ::= ID COMMA Args 
            {
              Args RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args arg = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = arg.addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Args ::= Expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(exleft,exright,"ArgsOp").addChild(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubOp(e1xleft,e1xright,"SubOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOp(e1xleft,e1xright,"AddOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultOp(e1xleft,e1xright,"MultOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivOp(e1xleft,e1xright,"DivOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOp(e1xleft,e1xright,"AndOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOp(e1xleft,e1xright,"OrOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtOp(e1xleft,e1xright,"GtOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeOp(e1xleft,e1xright,"GeOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeOp(e1xleft,e1xright,"LeOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtOp(e1xleft,e1xright,"LtOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqOp(e1xleft,e1xright,"EqOp", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UminusOp(exleft, exright,"UminusOp", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotOp(exleft, exright,"NotOp", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolConst(txleft, txright, "BoolConst", new Leaf(txleft, txright,"Value", "true")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolConst(fxleft, fxright, "BoolConst", new Leaf(fxleft, fxright,"Value", "false")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright,"Value", id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntConst(icxleft, icxright,"IntConst", new Leaf(icxleft, icxright,"Value", ic)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoubleConst(dcxleft,dcxright,"DoubleConst", new Leaf(dcxleft,dcxright,"Value", dc)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharConst(ccxleft, ccxright, "CharConst", new Leaf(ccxleft, ccxright,"Value", cc)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConst(scxleft, scxright, "StringConst", new Leaf(scxleft,scxright, "Value", sc));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

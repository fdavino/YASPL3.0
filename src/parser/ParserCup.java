
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import syntaxTree.*;
import syntaxTree.arithOp.*;
import syntaxTree.comp.*;
import syntaxTree.logicOp.*;
import syntaxTree.relOp.*;
import syntaxTree.statOp.*;
import syntaxTree.wrapper.*;
import syntaxTree.varDeclInitOp.*;
import syntaxTree.leaf.*;
import syntaxTree.utils.*;
import syntaxTree.declsOp.*;
import visitor.*;
import exception.*;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LexerSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\006\000\002\007\004\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\003" +
    "\000\002\012\010\000\002\012\007\000\002\013\004\000" +
    "\002\013\002\000\002\014\007\000\002\014\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\006\000\002\017\007\000\002\017\006\000\002" +
    "\017\012\000\002\017\010\000\002\017\010\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\004\000\002\022\004" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\004\005\001\002\000\004\002\213\001" +
    "\002\000\020\005\ufffd\007\010\010\013\011\012\012\017" +
    "\015\016\061\007\001\002\000\004\013\204\001\002\000" +
    "\004\013\ufff9\001\002\000\004\013\ufff8\001\002\000\020" +
    "\005\ufffd\007\010\010\013\011\012\012\017\015\016\061" +
    "\007\001\002\000\004\013\ufff6\001\002\000\004\013\ufff7" +
    "\001\002\000\020\005\ufffd\007\010\010\013\011\012\012" +
    "\017\015\016\061\007\001\002\000\004\005\177\001\002" +
    "\000\004\013\020\001\002\000\004\013\ufff5\001\002\000" +
    "\004\016\021\001\002\000\012\017\027\056\023\057\022" +
    "\060\026\001\002\000\014\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\061\uffe7\001\002\000\014\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\061\uffe8\001\002\000\014\007\010\010\013\011" +
    "\012\012\017\061\007\001\002\000\004\017\171\001\002" +
    "\000\014\007\uffe6\010\uffe6\011\uffe6\012\uffe6\061\uffe6\001" +
    "\002\000\004\020\030\001\002\000\052\007\010\010\013" +
    "\011\012\012\017\013\uffeb\016\uffeb\021\uffeb\024\uffeb\025" +
    "\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\041\uffeb\043\uffeb\053\uffeb\061\007\001\002\000" +
    "\020\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\015\uffed" +
    "\061\uffed\001\002\000\040\013\047\016\056\021\ufffb\024" +
    "\051\025\052\027\054\032\050\033\037\034\035\035\057" +
    "\036\043\037\053\041\045\043\040\053\041\001\002\000" +
    "\052\007\010\010\013\011\012\012\017\013\uffeb\016\uffeb" +
    "\021\uffeb\024\uffeb\025\uffeb\027\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\043\uffeb\053\uffeb" +
    "\061\007\001\002\000\040\013\uffec\016\uffec\021\uffec\024" +
    "\uffec\025\uffec\027\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\041\uffec\043\uffec\053\uffec\001\002\000" +
    "\040\006\uffc0\014\uffc0\017\uffc0\023\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\054\uffc0\055\uffc0\001\002\000\042\002\ufffb\013\047" +
    "\016\056\021\ufffb\024\051\025\052\027\054\032\050\033" +
    "\037\034\035\035\057\036\043\037\053\041\045\043\040" +
    "\053\041\001\002\000\040\006\uffc2\014\uffc2\017\uffc2\023" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\001\002\000" +
    "\004\016\163\001\002\000\026\013\061\016\056\027\054" +
    "\032\050\033\037\034\035\035\057\036\043\037\053\053" +
    "\041\001\002\000\004\021\161\001\002\000\040\006\uffc6" +
    "\014\uffc6\017\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\004\023\157\001\002\000\004\016" +
    "\145\001\002\000\040\006\uffd6\014\143\017\uffd6\023\uffd6" +
    "\026\065\027\063\030\072\031\070\046\071\047\064\050" +
    "\074\051\067\052\066\054\062\055\075\001\002\000\046" +
    "\014\120\016\122\022\uffef\023\uffc4\024\121\025\123\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\040\124\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\001\002\000" +
    "\040\006\uffc3\014\uffc3\017\uffc3\023\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\054\uffc3\055\uffc3\001\002\000\004\013\116\001\002" +
    "\000\004\013\114\001\002\000\040\006\uffc5\014\uffc5\017" +
    "\uffc5\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\001" +
    "\002\000\026\013\061\016\056\027\054\032\050\033\037" +
    "\034\035\035\057\036\043\037\053\053\041\001\002\000" +
    "\004\022\111\001\002\000\026\013\061\016\056\027\054" +
    "\032\050\033\037\034\035\035\057\036\043\037\053\053" +
    "\041\001\002\000\040\006\uffc1\014\uffc1\017\uffc1\023\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\001\002\000\032" +
    "\017\073\026\065\027\063\030\072\031\070\046\071\047" +
    "\064\050\074\051\067\052\066\054\062\055\075\001\002" +
    "\000\040\006\uffc4\014\uffc4\017\uffc4\023\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\054\uffc4\055\uffc4\001\002\000\026\013\061\016" +
    "\056\027\054\032\050\033\037\034\035\035\057\036\043" +
    "\037\053\053\041\001\002\000\026\013\061\016\056\027" +
    "\054\032\050\033\037\034\035\035\057\036\043\037\053" +
    "\053\041\001\002\000\026\013\061\016\056\027\054\032" +
    "\050\033\037\034\035\035\057\036\043\037\053\053\041" +
    "\001\002\000\026\013\061\016\056\027\054\032\050\033" +
    "\037\034\035\035\057\036\043\037\053\053\041\001\002" +
    "\000\026\013\061\016\056\027\054\032\050\033\037\034" +
    "\035\035\057\036\043\037\053\053\041\001\002\000\026" +
    "\013\061\016\056\027\054\032\050\033\037\034\035\035" +
    "\057\036\043\037\053\053\041\001\002\000\026\013\061" +
    "\016\056\027\054\032\050\033\037\034\035\035\057\036" +
    "\043\037\053\053\041\001\002\000\026\013\061\016\056" +
    "\027\054\032\050\033\037\034\035\035\057\036\043\037" +
    "\053\053\041\001\002\000\026\013\061\016\056\027\054" +
    "\032\050\033\037\034\035\035\057\036\043\037\053\053" +
    "\041\001\002\000\040\006\uffc7\014\uffc7\017\uffc7\023\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7\001\002\000\026" +
    "\013\061\016\056\027\054\032\050\033\037\034\035\035" +
    "\057\036\043\037\053\053\041\001\002\000\026\013\061" +
    "\016\056\027\054\032\050\033\037\034\035\035\057\036" +
    "\043\037\053\053\041\001\002\000\040\006\uffcf\014\uffcf" +
    "\017\uffcf\023\uffcf\026\uffcf\027\uffcf\030\072\031\070\046" +
    "\071\047\064\050\074\051\067\052\066\054\062\055\uffcf" +
    "\001\002\000\026\006\uffcb\014\uffcb\017\uffcb\023\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\054\uffcb\055\uffcb\001\002" +
    "\000\040\006\uffd2\014\uffd2\017\uffd2\023\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\046\071\047\064\050\074\051\067" +
    "\052\066\054\uffd2\055\uffd2\001\002\000\026\006\uffce\014" +
    "\uffce\017\uffce\023\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\054\uffce\055\uffce\001\002\000\040\006\uffd1\014\uffd1\017" +
    "\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\046\071" +
    "\047\064\050\074\051\067\052\066\054\uffd1\055\uffd1\001" +
    "\002\000\026\006\uffcc\014\uffcc\017\uffcc\023\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\054\uffcc\055\uffcc\001\002\000" +
    "\026\006\uffca\014\uffca\017\uffca\023\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\054\uffca\055\uffca\001\002\000\040\006" +
    "\uffd3\014\uffd3\017\uffd3\023\uffd3\026\uffd3\027\uffd3\030\072" +
    "\031\070\046\071\047\064\050\074\051\067\052\066\054" +
    "\062\055\uffd3\001\002\000\026\006\uffcd\014\uffcd\017\uffcd" +
    "\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\040\006\uffd4\014\uffd4\017\uffd4\023\uffd4" +
    "\026\uffd4\027\uffd4\030\072\031\070\046\071\047\064\050" +
    "\074\051\067\052\066\054\062\055\uffd4\001\002\000\040" +
    "\006\uffd0\014\uffd0\017\uffd0\023\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\046\071\047\064\050\074\051\067\052\066" +
    "\054\uffd0\055\uffd0\001\002\000\004\006\112\001\002\000" +
    "\042\002\uffe4\013\uffe4\016\uffe4\021\uffe4\024\uffe4\025\uffe4" +
    "\027\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\041\uffe4\043\uffe4\053\uffe4\001\002\000\040\006\uffc9" +
    "\014\uffc9\017\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\001\002\000\004\006\115\001\002\000\042\002" +
    "\uffdf\013\uffdf\016\uffdf\021\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041" +
    "\uffdf\043\uffdf\053\uffdf\001\002\000\004\006\117\001\002" +
    "\000\042\002\uffe1\013\uffe1\016\uffe1\021\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\041\uffe1\043\uffe1\053\uffe1\001\002\000\026\013" +
    "\141\016\056\027\054\032\050\033\037\034\035\035\057" +
    "\036\043\037\053\053\041\001\002\000\004\006\140\001" +
    "\002\000\030\013\125\016\056\017\133\027\054\032\050" +
    "\033\037\034\035\035\057\036\043\037\053\053\041\001" +
    "\002\000\004\006\132\001\002\000\026\013\125\016\056" +
    "\027\054\032\050\033\037\034\035\035\057\036\043\037" +
    "\053\053\041\001\002\000\040\006\uffc4\014\130\017\uffc4" +
    "\023\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\001\002" +
    "\000\004\006\127\001\002\000\042\002\uffde\013\uffde\016" +
    "\uffde\021\uffde\024\uffde\025\uffde\027\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\041\uffde\043\uffde\053" +
    "\uffde\001\002\000\026\013\125\016\056\027\054\032\050" +
    "\033\037\034\035\035\057\036\043\037\053\053\041\001" +
    "\002\000\010\006\uffd7\017\uffd7\023\uffd7\001\002\000\042" +
    "\002\uffe0\013\uffe0\016\uffe0\021\uffe0\024\uffe0\025\uffe0\027" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\041\uffe0\043\uffe0\053\uffe0\001\002\000\004\006\137\001" +
    "\002\000\004\017\135\001\002\000\004\006\136\001\002" +
    "\000\042\002\uffdd\013\uffdd\016\uffdd\021\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\041\uffdd\043\uffdd\053\uffdd\001\002\000\042\002" +
    "\uffdc\013\uffdc\016\uffdc\021\uffdc\024\uffdc\025\uffdc\027\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041" +
    "\uffdc\043\uffdc\053\uffdc\001\002\000\042\002\uffe2\013\uffe2" +
    "\016\uffe2\021\uffe2\024\uffe2\025\uffe2\027\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2\043\uffe2" +
    "\053\uffe2\001\002\000\036\014\120\022\uffef\023\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\054\uffc4\055\uffc4\001\002\000\004\022" +
    "\ufff0\001\002\000\026\013\125\016\056\027\054\032\050" +
    "\033\037\034\035\035\057\036\043\037\053\053\041\001" +
    "\002\000\010\006\uffd8\017\uffd8\023\uffd8\001\002\000\026" +
    "\013\061\016\056\027\054\032\050\033\037\034\035\035" +
    "\057\036\043\037\053\053\041\001\002\000\032\017\147" +
    "\026\065\027\063\030\072\031\070\046\071\047\064\050" +
    "\074\051\067\052\066\054\062\055\075\001\002\000\004" +
    "\042\150\001\002\000\004\020\151\001\002\000\040\013" +
    "\047\016\056\021\ufffb\024\051\025\052\027\054\032\050" +
    "\033\037\034\035\035\057\036\043\037\053\041\045\043" +
    "\040\053\041\001\002\000\044\002\uffda\013\uffda\016\uffda" +
    "\021\uffda\024\uffda\025\uffda\027\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\041\uffda\043\uffda\045\153" +
    "\053\uffda\001\002\000\004\020\151\001\002\000\042\002" +
    "\uffdb\013\uffdb\016\uffdb\021\uffdb\024\uffdb\025\uffdb\027\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041" +
    "\uffdb\043\uffdb\053\uffdb\001\002\000\004\021\156\001\002" +
    "\000\044\002\uffd5\013\uffd5\016\uffd5\021\uffd5\024\uffd5\025" +
    "\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\043\uffd5\045\uffd5\053\uffd5\001\002\000" +
    "\004\006\160\001\002\000\042\002\uffe3\013\uffe3\016\uffe3" +
    "\021\uffe3\024\uffe3\025\uffe3\027\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\043\uffe3\053\uffe3" +
    "\001\002\000\060\002\uffe5\005\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\041\uffe5\043\uffe5\053\uffe5\061\uffe5\001\002" +
    "\000\040\006\uffc8\014\uffc8\017\uffc8\023\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\054\uffc8\055\uffc8\001\002\000\026\013\061\016" +
    "\056\027\054\032\050\033\037\034\035\035\057\036\043" +
    "\037\053\053\041\001\002\000\032\017\165\026\065\027" +
    "\063\030\072\031\070\046\071\047\064\050\074\051\067" +
    "\052\066\054\062\055\075\001\002\000\004\044\166\001" +
    "\002\000\004\020\030\001\002\000\042\002\uffd9\013\uffd9" +
    "\016\uffd9\021\uffd9\024\uffd9\025\uffd9\027\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\043\uffd9" +
    "\053\uffd9\001\002\000\006\002\ufffc\021\ufffc\001\002\000" +
    "\004\020\030\001\002\000\020\005\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\015\uffee\061\uffee\001\002\000\004\013" +
    "\174\001\002\000\006\014\175\017\uffe9\001\002\000\010" +
    "\056\023\057\022\060\026\001\002\000\004\017\uffea\001" +
    "\002\000\040\002\ufffb\013\047\016\056\024\051\025\052" +
    "\027\054\032\050\033\037\034\035\035\057\036\043\037" +
    "\053\041\045\043\040\053\041\001\002\000\004\002\001" +
    "\001\002\000\004\005\uffff\001\002\000\004\005\ufffe\001" +
    "\002\000\004\006\212\001\002\000\010\006\ufff1\014\ufff1" +
    "\040\206\001\002\000\006\006\ufff3\014\210\001\002\000" +
    "\026\013\061\016\056\027\054\032\050\033\037\034\035" +
    "\035\057\036\043\037\053\053\041\001\002\000\034\006" +
    "\ufff2\014\ufff2\026\065\027\063\030\072\031\070\046\071" +
    "\047\064\050\074\051\067\052\066\054\062\055\075\001" +
    "\002\000\004\013\204\001\002\000\004\006\ufff4\001\002" +
    "\000\056\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\015\ufffa\016\ufffa\021\ufffa\024\ufffa\025\ufffa\027\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\041" +
    "\ufffa\043\ufffa\053\ufffa\061\ufffa\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\014\005\013\006\005\012\010\001\001\000\004" +
    "\007\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\201\005\013\006\005\012\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\200\005\013\006" +
    "\005\012\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\030\001\001\000\010\005\032\006\005\013\031" +
    "\001\001\000\002\001\001\000\014\004\041\011\054\017" +
    "\035\020\043\022\045\001\001\000\010\005\032\006\005" +
    "\013\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\167\011\054\017\035\020\043\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\112\001\001\000\002\001\001\000" +
    "\004\022\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\107\001\001\000\004\022" +
    "\106\001\001\000\004\022\105\001\001\000\004\022\104" +
    "\001\001\000\004\022\103\001\001\000\004\022\102\001" +
    "\001\000\004\022\101\001\001\000\004\022\100\001\001" +
    "\000\004\022\077\001\001\000\002\001\001\000\004\022" +
    "\076\001\001\000\004\022\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\141\020\130\022\045\001\001" +
    "\000\002\001\001\000\006\020\133\022\045\001\001\000" +
    "\002\001\001\000\006\020\125\022\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\130\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\143\022\045\001" +
    "\001\000\002\001\001\000\004\022\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\151\001\001\000" +
    "\014\004\154\011\054\017\035\020\043\022\045\001\001" +
    "\000\002\001\001\000\004\021\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\175\015\023\001" +
    "\001\000\002\001\001\000\014\004\177\011\054\017\035" +
    "\020\043\022\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\204" +
    "\001\001\000\002\001\001\000\004\022\206\001\001\000" +
    "\002\001\001\000\004\007\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//@@CUPDBG0

 public void report_error(String msg, Object info){
   if(info instanceof ComplexSymbol){
    int line = (((ComplexSymbol)info).getLeft().getLine());
    int col  = (((ComplexSymbol)info).getRight().getColumn());
    String val = (String)((ComplexSymbol)info).value;
   throw new SyntaxError(line, col);
   }
  }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              Programma RESULT =null;
		Location hxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location hxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG1
 RESULT = new Programma(hxleft,hxright,"Programma", decls, s); 
																				System.out.println("Done!!"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Programma start_val = (Programma)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              Decls RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG2
 RESULT = decls.addChild(var); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              Decls RESULT =null;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		DeclsWrapper def = (DeclsWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG3
 RESULT = decls.addChild(def); 
																								decls.setLeft(declsxleft);
																								decls.setRight(declsxright);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Decls RESULT =null;
		//@@CUPDBG4
 RESULT = new Decls(null,null,"Decls"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              Statements RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Statements stmt = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG5
 RESULT = stmt.addChild(s); 
																								stmt.setLeft(sxleft);
																								stmt.setRight(sxright);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= 
            {
              Statements RESULT =null;
		//@@CUPDBG6
 RESULT = new Statements(null,null,"Statements"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Var_decls_init SEMI 
            {
              VarDecl RESULT =null;
		Location tpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location tpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		TypeLeaf tp = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location vdixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location vdixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG7
 RESULT = new VarDecl(tpxleft,tpxright,"VarDecl", tp, vdi); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeLeaf RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG8
 RESULT = new TypeLeaf(txleft,txright,"Type", "INT"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeLeaf RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG9
 RESULT = new TypeLeaf(txleft,txright,"Type", "BOOL"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              TypeLeaf RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG10
 RESULT = new TypeLeaf(txleft,txright,"Type", "DOUBLE"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeLeaf RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG11
 RESULT = new TypeLeaf(txleft,txright,"Type", "STRING"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeLeaf RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG12
 RESULT = new TypeLeaf(txleft,txright,"Type", "CHAR"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_decls_init ::= ID Var_init_value COMMA Var_decls_init 
            {
              VarDeclsInit RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location vivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location vivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location vdixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location vdixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG13
 RESULT = (viv == null)
																					? vdi.addChild(new VarNotInit(idxleft,idxright,"VarNotInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))))
																					: vdi.addChild(new VarInit(idxleft,idxright,"VarInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), viv)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Var_decls_init ::= ID Var_init_value 
            {
              VarDeclsInit RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location vivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location vivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG14
 RESULT = (viv == null) 
																					? (new VarDeclsInit(idxleft,idxright,"VarDeclsInit")).addChild(new VarNotInit(idxleft,idxright,"VarNotInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))))
																					: (new VarDeclsInit(idxleft,idxright,"VarDeclsInit")).addChild(new VarInit(idxleft,idxright,"VarInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), viv)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Var_init_value ::= ASSIGN Expr 
            {
              VarInitValue RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG15
 RESULT = new VarInitValue(exleft,exright,"VarInitValue", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_init_value ::= 
            {
              VarInitValue RESULT =null;
		//@@CUPDBG16
 RESULT = null; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Vars ::= ID COMMA Vars 
            {
              Vars RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG17
 RESULT = vars.addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Vars ::= ID 
            {
              Vars RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG18
 RESULT = new Vars(idxleft,idxright,"Vars").addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body 
            {
              DeclsWrapper RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		ParDecls par = (ParDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG19
 RESULT = new DefDeclPar(idxleft,idxright,"DefDecl", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), par, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              DeclsWrapper RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG20
 RESULT = new DefDeclNoPar(idxleft,idxright,"DefDecl", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var_decls ::= Var_decl Var_decls 
            {
              VarDecls RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location vdsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location vdsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		VarDecls vds = (VarDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG21
 RESULT = vds.addChild(vd);
																									vds.setLeft(vdxleft);
																									vds.setRight(vdxright); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var_decls ::= 
            {
              VarDecls RESULT =null;
		//@@CUPDBG22
 RESULT = new VarDecls(null,null,"VarDecls"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Par_decls ::= Par_type Type ID COMMA Par_decls 
            {
              ParDecls RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location parDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location parDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		ParDecls parDecls = (ParDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG23
 RESULT = parDecls
																						.addChild(new ParDeclSon(parxleft,parxright,"ParDeclSon", par, type, new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))));
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Par_decls ::= Par_type Type ID 
            {
              ParDecls RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG24
 RESULT = new ParDecls(idxleft,idxright,"ParDeclsOp")
																						.addChild(new ParDeclSon(idxleft,idxright,"ParDeclSon", par, type, new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))));
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Par_type ::= IN 
            {
              ParTypeLeaf RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG25
 RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "IN"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Par_type ::= OUT 
            {
              ParTypeLeaf RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG26
 RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "OUT"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Par_type ::= INOUT 
            {
              ParTypeLeaf RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG27
 RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "INOUT"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Body ::= LGPAR Var_decls Statements RGPAR 
            {
              Body RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		VarDecls vd = (VarDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG28
 RESULT = new Body(vdxleft,vdxright,"Body", vd, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Vars READ SEMI 
            {
              Stat RESULT =null;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG29
 RESULT = new ReadOp(rxleft,rxright,"ReadOp", vars); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= Args WRITE SEMI 
            {
              Stat RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG30
 RESULT = new WriteOp(wxleft,wxright,"WriteOp", args); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= ID INC SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		//@@CUPDBG31
 RESULT = new IncPostOp(idxleft, idxright, "IncPostOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= INC ID SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG32
 RESULT = new IncPreOp(idxleft, idxright, "IncPreOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= ID DEC SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		//@@CUPDBG33
 RESULT = new DecPostOp(idxleft, idxright, "DecPostOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= DEC ID SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG34
 RESULT = new DecPreOp(idxleft, idxright, "DecPreOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ID ASSIGN Args SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG35
 RESULT = new AssignOp(idxleft,idxright,"AssignOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), a); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ID LPAR Args RPAR SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		//@@CUPDBG36
 RESULT = new CallOp(idxleft,idxright,"CallOpWithArgs", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), args); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= ID LPAR RPAR SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		//@@CUPDBG37
 RESULT = new CallOp(idxleft,idxright,"CallOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat ELSE Comp_stat 
            {
              Stat RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		Location cs1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location cs1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		CompStat cs1 = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location cs2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location cs2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		CompStat cs2 = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG38
 RESULT = new IfThenElseOp(exleft,exright,"IfThenElseOp", e, cs1, cs2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat 
            {
              Stat RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		CompStat cs = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG39
 RESULT = new IfThenOp(exleft,exright,"IfThenOp", e, cs); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG40
 RESULT = new WhileOp(exleft,exright,"WhileOp", e, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Args ::= Expr COMMA Args 
            {
              Args RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Args arg = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG41
 RESULT = arg.addChild(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Args ::= ID COMMA Args 
            {
              Args RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Args arg = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG42
 RESULT = arg.addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)));
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Args ::= Expr 
            {
              Args RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG43
 RESULT = new Args(exleft,exright,"ArgsOp").addChild(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              CompStat RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG44
 RESULT = new CompStat(sxleft,sxright,"CompStat", s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Comp_stat",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG45
 RESULT = new SubOp(e1xleft,e1xright,"SubOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG46
 RESULT = new AddOp(e1xleft,e1xright,"AddOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG47
 RESULT = new MultOp(e1xleft,e1xright,"MultOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG48
 RESULT = new DivOp(e1xleft,e1xright,"DivOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG49
 RESULT = new AndOp(e1xleft,e1xright,"AndOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG50
 RESULT = new OrOp(e1xleft,e1xright,"OrOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG51
 RESULT = new GtOp(e1xleft,e1xright,"GtOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG52
 RESULT = new GeOp(e1xleft,e1xright,"GeOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG53
 RESULT = new LeOp(e1xleft,e1xright,"LeOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG54
 RESULT = new LtOp(e1xleft,e1xright,"LtOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG55
 RESULT = new EqOp(e1xleft,e1xright,"EqOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG56
 RESULT = new UminusOp(exleft, exright,"UminusOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG57
 RESULT = new NotOp(exleft, exright,"NotOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG58
 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG59
 RESULT = new BoolConst(txleft, txright, "BoolConst", new Leaf(txleft, txright,"Value", "true")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG60
 RESULT = new BoolConst(fxleft, fxright, "BoolConst", new Leaf(fxleft, fxright,"Value", "false")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= ID 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG61
 RESULT = new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright,"Value", id)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		Location icxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location icxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String ic = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG62
 RESULT = new IntConst(icxleft, icxright,"IntConst", new Leaf(icxleft, icxright,"Value", ic)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		Location dcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location dcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String dc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG63
 RESULT = new DoubleConst(dcxleft,dcxright,"DoubleConst", new Leaf(dcxleft,dcxright,"Value", dc)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		Location ccxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location ccxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG64
 RESULT = new CharConst(ccxleft, ccxright, "CharConst", new Leaf(ccxleft, ccxright,"Value", cc)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String sc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG65
 RESULT = new StringConst(scxleft, scxright, "StringConst", new Leaf(scxleft,scxright, "Value", sc));  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}

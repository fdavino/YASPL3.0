package parser;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import syntaxTree.*;  
import syntaxTree.arithOp.*;
import syntaxTree.comp.*;
import syntaxTree.logicOp.*;
import syntaxTree.relOp.*;
import syntaxTree.statOp.*;
import syntaxTree.wrapper.*;
import syntaxTree.varDeclInitOp.*;
import syntaxTree.leaf.*;
import syntaxTree.utils.*;
import syntaxTree.declsOp.*;
import visitor.*;
import exception.*;
import java.io.*;

parser code{:
 public void report_error(String msg, Object info){
   if(info instanceof ComplexSymbol){
    int line = (((ComplexSymbol)info).getLeft().getLine());
    int col  = (((ComplexSymbol)info).getRight().getColumn());
    String val = (String)((ComplexSymbol)info).value;
   throw new SyntaxError(line, col);
   }
  }
 
:}

/*List of terminals*/
terminal HEAD;
terminal START;
terminal SEMI;
terminal BOOL;
terminal DOUBLE;
terminal STRING;
terminal CHAR;
terminal String ID;
terminal COMMA;
terminal DEF;
terminal LPAR;
terminal RPAR;
terminal LGPAR;
terminal RGPAR;
terminal READ;
terminal WRITE; 
terminal INC;
terminal DEC;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIV;
terminal String INT_CONST;
terminal String DOUBLE_CONST;
terminal String STRING_CONST;
terminal String CHAR_CONST;
terminal TRUE;
terminal FALSE;
terminal ASSIGN;
terminal IF;
terminal THEN;
terminal WHILE;
terminal DO;
terminal ELSE;
terminal GT;
terminal GE;
terminal LT;
terminal LE;
terminal EQ;
terminal NOT;
terminal AND;
terminal OR;
terminal IN;
terminal OUT;
terminal INOUT;
terminal INT;
terminal UMINUS; /*is the Symbol '-'  used for unary Internal*/ 


/*List of non teminals*/  
non terminal	Programma			Programma; 
non terminal	Decls		 		Decls;
non terminal	Statements			Statements; 
non terminal	VarDecl				Var_decl;
non terminal	TypeLeaf				Type;
non terminal	VarDeclsInit		Var_decls_init;
non terminal	VarInitValue		Var_init_value;
non terminal	Vars				Vars;
non terminal	DeclsWrapper			Def_decl;
non terminal	VarDecls			Var_decls;
non terminal	ParDecls			Par_decls;  
non terminal	ParTypeLeaf				Par_type;
non terminal	Body				Body; 
non terminal	Stat				Stat;
non terminal	Args				Args;
non terminal	CompStat			Comp_stat;
non terminal	Expr				Expr;
/*List of precedences*/ 

precedence nonassoc  ELSE; 
precedence left PLUS,MINUS,OR;
precedence left TIMES,DIV,AND;
precedence nonassoc GT, GE, LT, LE, EQ;
precedence left UMINUS, NOT, COMMA;
	

/*Grammar*/												
Programma 	::= HEAD:h Decls:decls START Statements:s							{: RESULT = new Programma(hxleft,hxright,"Programma", decls, s); 
																				System.out.println("Done!!"); :}
			; 
																
Decls 		::= Var_decl:var Decls:decls									{: RESULT = decls.addChild(var); :}
			|	Def_decl:def Decls:decls									{: RESULT = decls.addChild(def); 
																								decls.setLeft(declsxleft);
																								decls.setRight(declsxright);:}
			|	 /*epsilon*/												{: RESULT = new Decls(null,null,"Decls"); :}
			;
Statements	::=	Stat:s Statements:stmt										{: RESULT = stmt.addChild(s); 
																								stmt.setLeft(sxleft);
																								stmt.setRight(sxright);:}
			|	 /*epsilon*/												{: RESULT = new Statements(null,null,"Statements"); :}
			;
Var_decl	::=	Type:tp Var_decls_init:vdi SEMI								{: RESULT = new VarDecl(tpxleft,tpxright,"VarDecl", tp, vdi); :}
			; 
Type		::=	INT:t 														{: RESULT = new TypeLeaf(txleft,txright,"Type", "INT"); :}
			|	BOOL:t														{: RESULT = new TypeLeaf(txleft,txright,"Type", "BOOL"); :}
			|	DOUBLE:t 														{: RESULT = new TypeLeaf(txleft,txright,"Type", "DOUBLE"); :}
			|	STRING:t 														{: RESULT = new TypeLeaf(txleft,txright,"Type", "STRING"); :}
			|	CHAR:t 														{: RESULT = new TypeLeaf(txleft,txright,"Type", "CHAR"); :}
			;
			
Var_decls_init	::=	ID:id Var_init_value:viv COMMA Var_decls_init:vdi		{: RESULT = (viv == null)
																					? vdi.addChild(new VarNotInit(idxleft,idxright,"VarNotInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))))
																					: vdi.addChild(new VarInit(idxleft,idxright,"VarInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), viv)); :}
				|	ID:id Var_init_value:viv								{: RESULT = (viv == null) 
																					? (new VarDeclsInit(idxleft,idxright,"VarDeclsInit")).addChild(new VarNotInit(idxleft,idxright,"VarNotInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))))
																					: (new VarDeclsInit(idxleft,idxright,"VarDeclsInit")).addChild(new VarInit(idxleft,idxright,"VarInit", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), viv)); :}
				;
Var_init_value	::= ASSIGN Expr:e											{: RESULT = new VarInitValue(exleft,exright,"VarInitValue", e); :}
				|	/*epsilon*/												{: RESULT = null; :}
				;
Vars		::=	ID:id COMMA Vars:vars										{: RESULT = vars.addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); :}
			|	ID:id														{: RESULT = new Vars(idxleft,idxright,"Vars").addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); :}
			;
Def_decl	::=	DEF ID:id LPAR Par_decls:par RPAR Body:b					{: RESULT = new DefDeclPar(idxleft,idxright,"DefDecl", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), par, b); :}
			|	DEF ID:id LPAR RPAR Body:b									{: RESULT = new DefDeclNoPar(idxleft,idxright,"DefDecl", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), b); :}
			;
Var_decls	::=	Var_decl:vd Var_decls:vds									{: RESULT = vds.addChild(vd);
																									vds.setLeft(vdxleft);
																									vds.setRight(vdxright); :}
			|	/*epsilon*/												{: RESULT = new VarDecls(null,null,"VarDecls"); :}
			;
Par_decls	::=	Par_type:par Type:type ID:id COMMA Par_decls:parDecls		{: RESULT = parDecls
																						.addChild(new ParDeclSon(parxleft,parxright,"ParDeclSon", par, type, new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))));:}
			|	Par_type:par Type:type ID:id								{: RESULT = new ParDecls(idxleft,idxright,"ParDeclsOp")
																						.addChild(new ParDeclSon(idxleft,idxright,"ParDeclSon", par, type, new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))));:}
			;
			
Par_type	::=	IN:i															{: RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "IN"); :}
			|	OUT:i															{: RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "OUT"); :}
			|	INOUT:i														{: RESULT = new ParTypeLeaf(ixleft,ixright,"ParType", "INOUT"); :}
			;
			
Body		::=	LGPAR Var_decls:vd Statements:s RGPAR						{: RESULT = new Body(vdxleft,vdxright,"Body", vd, s); :}
			;
			
Stat		::= Vars:vars READ:r SEMI										{: RESULT = new ReadOp(rxleft,rxright,"ReadOp", vars); :}
			|	Args:args WRITE:w SEMI										{: RESULT = new WriteOp(wxleft,wxright,"WriteOp", args); :}
			|	ID:id INC SEMI												{: RESULT = new IncPostOp(idxleft, idxright, "IncPostOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); :}
			|	INC ID:id SEMI												{: RESULT = new IncPreOp(idxleft, idxright, "IncPreOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); :}
			|	ID:id DEC SEMI												{: RESULT = new DecPostOp(idxleft, idxright, "DecPostOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); :}
			|	DEC ID:id SEMI												{: RESULT = new DecPreOp(idxleft, idxright, "DecPreOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value",id))); :}
			|	ID:id ASSIGN Args:a SEMI 									{: RESULT = new AssignOp(idxleft,idxright,"AssignOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), a); :}
			|	ID:id LPAR Args:args RPAR SEMI								{: RESULT = new CallOp(idxleft,idxright,"CallOpWithArgs", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)), args); :}
			|	ID:id LPAR RPAR SEMI									 	{: RESULT = new CallOp(idxleft,idxright,"CallOp", new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id))); :}
			|	IF LPAR Expr:e RPAR THEN Comp_stat:cs1 ELSE Comp_stat:cs2	{: RESULT = new IfThenElseOp(exleft,exright,"IfThenElseOp", e, cs1, cs2); :}
			|	IF LPAR Expr:e RPAR THEN Comp_stat:cs 						{: RESULT = new IfThenOp(exleft,exright,"IfThenOp", e, cs); :}
			|	WHILE LPAR Expr:e RPAR DO Body:b							{: RESULT = new WhileOp(exleft,exright,"WhileOp", e, b); :}
			;
			
Args		::=	Expr:e COMMA Args:arg		{: RESULT = arg.addChild(e); :}
			|	ID:id COMMA Args:arg		{: RESULT = arg.addChild(new IdConst(idxleft,idxright,"Id", new Leaf(idxleft,idxright,"Value", id)));:}
			|	Expr:e						{: RESULT = new Args(exleft,exright,"ArgsOp").addChild(e); :}				
			;
			
Comp_stat	::=	LGPAR Statements:s RGPAR 	{: RESULT = new CompStat(sxleft,sxright,"CompStat", s); :}
			;

Expr		::=	Expr:e1 MINUS Expr:e2		{: RESULT = new SubOp(e1xleft,e1xright,"SubOp", e1, e2); :}	
			|	Expr:e1 PLUS Expr:e2 		{: RESULT = new AddOp(e1xleft,e1xright,"AddOp", e1, e2); :}
			|	Expr:e1 TIMES Expr:e2		{: RESULT = new MultOp(e1xleft,e1xright,"MultOp", e1, e2); :}	
			|	Expr:e1 DIV Expr:e2			{: RESULT = new DivOp(e1xleft,e1xright,"DivOp", e1, e2); :}
			|	Expr:e1 AND Expr:e2			{: RESULT = new AndOp(e1xleft,e1xright,"AndOp", e1, e2); :}	
			|	Expr:e1 OR Expr:e2			{: RESULT = new OrOp(e1xleft,e1xright,"OrOp", e1, e2); :}
			|	Expr:e1 GT Expr:e2			{: RESULT = new GtOp(e1xleft,e1xright,"GtOp", e1, e2); :}
			|	Expr:e1 GE Expr:e2			{: RESULT = new GeOp(e1xleft,e1xright,"GeOp", e1, e2); :}	
			|	Expr:e1 LE Expr:e2			{: RESULT = new LeOp(e1xleft,e1xright,"LeOp", e1, e2); :}	
			|	Expr:e1 LT Expr:e2			{: RESULT = new LtOp(e1xleft,e1xright,"LtOp", e1, e2); :}
			|	Expr:e1 EQ Expr:e2			{: RESULT = new EqOp(e1xleft,e1xright,"EqOp", e1, e2); :}
			|	MINUS Expr:e 				{: RESULT = new UminusOp(exleft, exright,"UminusOp", e); :} %prec UMINUS			
			|	NOT Expr:e					{: RESULT = new NotOp(exleft, exright,"NotOp", e); :}
			|	LPAR Expr:e RPAR			{: RESULT = e; :}
			|	TRUE:t						{: RESULT = new BoolConst(txleft, txright, "BoolConst", new Leaf(txleft, txright,"Value", "true")); :}
			|	FALSE:f						{: RESULT = new BoolConst(fxleft, fxright, "BoolConst", new Leaf(fxleft, fxright,"Value", "false")); :}	
			|	ID:id						{: RESULT = new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright,"Value", id)); :}
			|	INT_CONST:ic 				{: RESULT = new IntConst(icxleft, icxright,"IntConst", new Leaf(icxleft, icxright,"Value", ic)); :}	
			|	DOUBLE_CONST:dc				{: RESULT = new DoubleConst(dcxleft,dcxright,"DoubleConst", new Leaf(dcxleft,dcxright,"Value", dc)); :}	
			|	CHAR_CONST:cc				{: RESULT = new CharConst(ccxleft, ccxright, "CharConst", new Leaf(ccxleft, ccxright,"Value", cc)); :}
			|	STRING_CONST:sc 			{: RESULT = new StringConst(scxleft, scxright, "StringConst", new Leaf(scxleft,scxright, "Value", sc));  :}	
			;